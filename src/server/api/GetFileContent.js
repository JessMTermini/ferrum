const fs = require("fs");
const path = require("path");

function getLangFromExtname(extname) {
    switch(extname) {
        case ".abap":
            return "abap";
        case ".cls":
            return "apex";
        case ".azcli":
            return "azcli";
        case ".bat":
        case ".cmd":
            return "bat";
        case ".c":
        case ".h":
            return "c";
        case ".mligo":
            return "cameligo";
        case ".clj":
        case ".cljs":
        case ".cljc":
        case ".edn":
            return "clojure";
        case ".coffee":
            return "coffeescript";
        case ".cpp":
        case ".cc":
        case ".cxx":
        case ".hpp":
        case ".hh":
        case ".hxx":
            return "cpp";
        case ".cs":
        case ".csx":
        case ".cake":
            return "csharp";
        case ".css":
            return "css";
        case ".dart":
            return "dart";
        case ".dockerfile":
            return "dockerfile";
        case ".ecl":
            return "ecl";
        case ".fs":
        case ".fsi":
        case ".ml":
        case ".mli":
        case ".fsx":
        case ".fsscript":
            return "fsharp";
        case ".go":
            return "go";
        case ".graphql":
        case ".gql":
            return "graphql";
        case ".handlebars":
        case ".hbs":
            return "handlebars";
        case ".tf":
        case ".tfvars":
        case ".hcl":
            return "hcl";
        case ".html":
        case ".htm":
        case ".shtml":
        case ".xhtml":
        case ".mdoc":
        case ".jsp":
        case ".asp":
        case ".aspx":
        case ".jshtm":
            return "html";
        case ".ini":
        case ".properties":
        case ".gitconfig":
            return "ini";
        case ".java":
        case ".jav":
            return "java";
        case ".js":
        case ".jsx":
        case ".mjs":
        case ".es6":
            return "javascript";
        case ".json":
            return "json";
        case ".jl":
            return "julia";
        case ".kt":
            return "kotlin";
        case ".less":
            return "less";
        case ".lex":
            return "lexon";
        case ".lua":
            return "lua";
        case ".m3":
        case "i3":
        case ".mg":
        case ".ig":
            return "m3";
        case ".md":
        case ".markdown":
        case ".mdown":
        case ".mkdn":
        case ".mkd":
        case ".mdwn":
        case ".mdtxt":
        case ".mdtext":
            return "markdown";
        case ".s":
            return "mips";
        case ".dax":
        case ".msdax":
            return "msdax";
        case ".m":
            return "objective-c";
        case ".pas":
        case ".p":
        case ".pp":
            return "pascal";
        case ".ligo":
            return "pascaligo";
        case ".pl":
            return "perl";
        case ".php":
        case ".php4":
        case ".php5":
        case ".phtml":
        case ".ctp":
            return "php";
        case ".dats":
        case ".sats":
        case ".hats":
            return "postiats";
        case ".pq":
        case ".pqm":
            return "powerquery";
        case ".ps1":
        case ".psm1":
        case ".psd1":
            return "powershell";
        case ".jade":
        case ".pug":
            return "pug";
        case ".py":
        case ".rpy":
        case ".pyw":
        case ".cpy":
        case ".gyp":
        case ".gypi":
            return "python";
        case ".r":
        case ".rhistory":
        case ".rmd":
        case ".rprofile":
        case ".rt":
            return "r";
        case ".cshtml":
            return "razor";
        case ".redis":
            return "redis";
        case ".rst":
            return "restructuredtext";
        case ".rb":
        case ".rbx":
        case ".rjs":
        case ".gemspec":
            return "ruby";
        case ".rs":
        case ".rlib":
            return "rust";
        case ".sb":
            return "sb";
        case ".scala":
            return "scala";
        case ".scm":
        case ".ss":
        case ".sch":
        case ".rkt":
            return "scheme";
        case ".sass":
        case ".scss":
            return "scss";
        case ".sh":
        case ".bash":
            return "shell";
        case ".aes":
            return "sophia";
        case ".sol":
            return "sol";
        case ".sql":
            return "sql";
        case ".st":
        case ".iecst":
        case ".iecplc":
        case ".lc3lib":
            return "st";
        case ".swift":
            return "swift";
        case ".sv":
        case ".svh":
            return "systemverilog";
        case ".tcl":
            return "tcl";
        case ".twig":
            return "twig";
        case ".ts":
        case ".tsx":
            return "typescript";
        case ".vb":
            return "vb";
        case ".v":
        case ".vh":
            return "verilog";
        case ".xml":
        case ".dtd":
        case ".ascx":
        case ".csproj":
        case ".config":
        case ".wxi":
        case ".wxl":
        case ".wxs":
        case ".xaml":
        case ".svg":
        case ".svgz":
        case ".opf":
        case ".xsl":
            return "xml";
        case ".yaml":
        case ".yml":
            return "yaml";
        default:
            return "text";
    }
}

module.exports = function(req, res) {
    var filePath = req.query.path.replace(/\\/g, "/"); // Absolute Path
    if(!fs.existsSync(filePath)) {
        res.end(JSON.stringify({err: 404}));
        return;
    }

    res.end(JSON.stringify({
        format: getLangFromExtname(path.extname(filePath)),
        content: fs.readFileSync(filePath, {encoding: "utf-8"})
    }));
};
